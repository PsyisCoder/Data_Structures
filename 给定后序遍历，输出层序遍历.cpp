#define _CRT_SECURE_NO_WARNINGS
/*题目：一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是完美二叉树。对于深度为 D 的，有 N 个结点的二叉树，若其结点对应于相同深度完美二叉树的层序遍历的前 N 个结点，这样的树就是完全二叉树。

给定一棵完全二叉树的后序遍历，请你给出这棵树的层序遍历结果。

输入格式：
输入在第一行中给出正整数 N（≤30），即树中结点个数。第二行给出后序遍历序列，为 N 个不超过 100 的正整数。同一行中所有数字都以空格分隔。

输出格式：
在一行中输出该树的层序遍历序列。所有数字都以 1 个空格分隔，行首尾不得有多余空格。

输入样例：
8
91 71 2 34 10 15 55 18
输出样例：
18 34 55 71 2 10 15 91
*/





//题解：

#include<iostream>
using namespace std;
const int N = 1e5 + 10;
int n, m, ans = 1;
int a[N], b[N], top = 1;
void dfs(int x) {
	//模拟后续遍历
	if (x <= n) {
		//访问左节点
		dfs(x * 2);
		//访问右节点
		dfs(x * 2 + 1);
		//访问根节点
		//并且输入数据
		//把主函数输入的数据输入到b里
		b[x] = a[top++];
	}
}
int main()
{
	int i, j;
	scanf("%d", &n);
	for (i = 1; i <= n; i++) {
		scanf("%d", &a[i]);
	}
	//为了层序输出
	//从1开始遍历
	dfs(1);
	for (i = 1; i <= n; i++) {
		if (i != 1) printf(" ");
		printf("%d", b[i]);
	}
	return 0;

}
